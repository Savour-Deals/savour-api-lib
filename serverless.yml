# NOTE: update this with your service name
service: savour-button-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  # - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
    businessesTbl: ${file(./env/config.${self:provider.stage}.json):businessesTbl}
    businessUsersTbl: ${file(./env/config.${self:provider.stage}.json):businessUsersTbl}
    subscriberUsersTbl: ${file(./env/config.${self:provider.stage}.json):subscriberUsersTbl}
    pushTbl: ${file(./env/config.${self:provider.stage}.json):pushTbl}
    unclaimedButtonTbl: ${file(./env/config.${self:provider.stage}.json):unclaimedButtonTbl}
    redirectTbl: ${file(./env/config.${self:provider.stage}.json):redirectTbl}
  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - lambda:InvokeFunction
        - ssm:GetParameter
      Resource: "*"
functions:

  ######################################################
  #####                                            #####
  #####          businesses table API              #####
  #####                                            #####
  ######################################################
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /businesses
  # - method: POST request
  create-business:
    handler: businesses_API/create.main
    events:
      - http:
          path: businesses
          method: post
          cors: true
          authorizer: aws_iam
  get-business:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /businesses/{id}
    # - method: GET request
    handler: businesses_API/get.main
    events:
      - http:
          path: businesses/{place_id}
          method: get
          cors: true
          authorizer: aws_iam
  update-business:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /businesses/{place_id}
    # - method: PUT request
    handler: businesses_API/update.main
    events:
      - http:
          path: businesses/{place_id}
          method: put
          cors: true
          authorizer: aws_iam
  delete-business:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /businesses/{place_id}
    # - method: DELETE request
    handler: businesses_API/delete.main
    events:
      - http:
          path: businesses/{place_id}
          method: delete
          cors: true
          authorizer: aws_iam

  ######################################################
  #####                                            #####
  #####          business users table API          #####
  #####                                            #####
  ######################################################
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /business_users
  # - method: POST request
  create-business-user:
    handler: business_users_API/create.main
    events:
      - http:
          path: business_users
          method: post
          cors: true
          authorizer: aws_iam
  get-business-user:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is business_users/{uid}
    # - method: GET request
    handler: business_users_API/get.main
    events:
      - http:
          path: business_users/{uid}
          method: get
          cors: true
          authorizer: aws_iam
  update-business-user:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is business_users/{uid}
    # - method: PUT request
    handler: business_users_API/update.main
    events:
      - http:
          path: business_users/{uid}
          method: put
          cors: true
          authorizer: aws_iam
  delete-business-user:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is business_users/{uid}
    # - method: DELETE request
    handler: business_users_API/delete.main
    events:
      - http:
          path: business_users/{uid}
          method: delete
          cors: true
          authorizer: aws_iam

  ######################################################
  #####                                            #####
  #####          subscriber users table API        #####
  #####                                            #####
  ######################################################
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /subscriber_users
  # - method: POST request
  create-subscriber-user:
    handler: subscriber_users_API/create.main
    events:
      - http:
          path: subscriber_users
          method: post
          cors: true
          authorizer: aws_iam
  get-subscriber-user:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is subscriber_users/{mobile_number}
    # - method: GET request
    handler: subscriber_users_API/get.main
    events:
      - http:
          path: subscriber_users/{mobile_number}
          method: get
          cors: true
          authorizer: aws_iam
  update-subscriber-user:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is subscriber_users/{mobile_number}
    # - method: PUT request
    handler: subscriber_users_API/update.main
    events:
      - http:
          path: subscriber_users/{mobile_number}
          method: put
          cors: true
          authorizer: aws_iam
  delete-subscriber-user:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is subscriber_users/{mobile_number}
    # - method: DELETE request
    handler: subscriber_users_API/delete.main
    events:
      - http:
          path: subscriber_users/{mobile_number}
          method: delete
          cors: true
          authorizer: aws_iam
  
  ######################################################
  #####                                            #####
  #####              push table API                #####
  #####                                            #####
  ######################################################
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /push_table
  # - method: POST request
  create-push-table:
    handler: push_table_API/create.main
    events:
      - http:
          path: push_table
          method: post
          cors: true
          authorizer: aws_iam
  get-push-table:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is push_table/{uid}
    # - method: GET request
    handler: push_table_API/get.main
    events:
      - http:
          path: push_table/g/{uid}
          method: get
          cors: true
          authorizer: aws_iam
  get-all-push-table:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is push_table/{btn_id}
    # - method: GET request
    handler: push_table_API/get-all.main
    events:
      - http:
          path: push_table/q/{btn_id}
          method: get
          cors: true
          authorizer: aws_iam
  delete-push-table:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is push_table/{uid}
    # - method: DELETE request
    handler: push_table_API/delete.main
    events:
      - http:
          path: push_table/{uid}
          method: delete
          cors: true
          authorizer: aws_iam

  
  ######################################################
  #####                                            #####
  #####       unclaimed buttons table API          #####
  #####                                            #####
  ######################################################
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /unclaimed_buttons
  # - method: POST request
  create-unclaimed-buttons:
    handler: unclaimed_buttons_API/create.main
    events:
      - http:
          path: unclaimed_buttons
          method: post
          cors: true
          authorizer: aws_iam
  get-unclaimed-buttons:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is unclaimed_buttons/{btn_id}
    # - method: GET request
    handler: unclaimed_buttons_API/get.main
    events:
      - http:
          path: unclaimed_buttons/{btn_id}
          method: get
          cors: true
          authorizer: aws_iam
  get-all-unclaimed-buttons:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is unclaimed_buttons
    # - method: GET request
    handler: unclaimed_buttons_API/get-all.main
    events:
      - http:
          path: unclaimed_buttons
          method: get
          cors: true
          authorizer: aws_iam
  delete-unclaimed-buttons:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is unclaimed_buttons/{btn_id}
    # - method: DELETE request
    handler: unclaimed_buttons_API/delete.main
    events:
      - http:
          path: unclaimed_buttons/{btn_id}
          method: delete
          cors: true
          authorizer: aws_iam

  ######################################################
  #####                                            #####
  #####       message service API                  #####
  #####                                            #####
  ######################################################
  # Defines an HTTP API endpoint that calls the main function in twilio-hooks.js
  # - path: url path is /message_service/twilio_hooks
  # - method: POST request
  twilio-hooks:
    handler: message_service_API/twilio-hooks.main
    events:
      - http:
          path: message_service/twilio_hooks
          method: post
          cors: true
  send-message:
    handler: message_service_API/send-message.main
    events:
      - http:
          path: message_service/send_message
          method: post
          cors: true
  # Defines an HTTP API endpoint that calls the main function in button-service.js
  # - path: url path is /message_service/button-service
  # - method: POST request
  button-service: 
    handler: message_service_API/button-service.main
    environment: 
      uuidSize: ${file(./env/config.${self:provider.stage}.json):uuidSize}
      accountSid: ${file(./env/config.${self:provider.stage}.json):accountSid}
      authToken: ${file(./env/config.${self:provider.stage}.json):authToken}
    events:
      - http:
          path: message_service/button-service
          method: post
          cors: true
  # Defines an HTTP API endpoint that calls the main function in create-twilio-number.js
  # - path: url path is /message_service/twilio_number/{place_id}
  # - method: POST request
  create-twilio-number:
    handler: message_service_API/create-twilio-number.main
    environment: 
      uuidSize: ${file(./env/config.${self:provider.stage}.json):uuidSize}
      accountSid: ${file(./env/config.${self:provider.stage}.json):accountSid}
      authToken: ${file(./env/config.${self:provider.stage}.json):authToken}
    events:
      - http:
          path: message_service/twilio_number/{place_id}
          method: post
          cors: true

  ######################################################
  #####                                            #####
  #####       Payment Service API                  #####
  #####                                            #####
  ######################################################
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /payments/{place_id}
  # - method: POST request
  create-customer:
    handler: payment_API/create.main
    environment: 
      stripeKey: ${ssm:/stripe-key-dev~true}
      recurringPlanID: ${file(./env/config.${self:provider.stage}.json):recurringPlanID}
      usagePlanID: ${file(./env/config.${self:provider.stage}.json):usagePlanID}
    events:
      - http:
          path: payments/{place_id}
          method: post
          cors: true
  # Defines an HTTP API endpoint that calls the main function in update-card.js
  # - path: url path is /payments/card/{place_id}
  # - method: PUT request
  update-card:
    handler: payment_API/update-card.main
    environment: 
      stripeKey: ${ssm:/stripe-key-dev~true}
    events:
      - http:
          path: payments/card/{place_id}
          method: put
          cors: true
  # Defines an HTTP API endpoint that calls the main function in update-usage.js
  # - path: url path is /payments/usage/{place_id}
  # - method: PUT request
  update-usage:
    handler: payment_API/update-usage.main
    environment: 
      stripeKey: ${ssm:/stripe-key-dev~true}
    events:
      - http:
          path: payments/usage/{place_id}
          method: put
          cors: true
  # Defines an HTTP API endpoint that calls the main function in cancel-subscription.js
  # - path: url path is /payments/subscription/{place_id}
  # - method: DELETE request
  cancel-subscription:
    handler: payment_API/cancel-subscription.main
    environment: 
      stripeKey: ${ssm:/stripe-key-dev~true}
    events:
      - http:
          path: payments/subscription/{place_id}
          method: delete
          cors: true

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)} 